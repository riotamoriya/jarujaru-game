import React, { useState, useEffect } from 'react';
import { useStaticQuery, graphql } from 'gatsby';
import './style.css';



const SoundButton = ({bottonText, setGameflow}) => {
  const data = useStaticQuery(graphql`
    query fetchResponsesSounds {
      Bingo: allFile(
        filter: {
          relativeDirectory: { eq: "specials" },
          extension: { eq: "mp3" },
          name: { eq: "bingo" }
        }
      ) {
        edges {
          node {
            publicURL
          }
        }
      }

      Out: allFile(
        filter: {
          relativeDirectory: { eq: "specials" },
          extension: { eq: "mp3" },
          name: { eq: "out" }
        }
      ) {
        edges {
          node {
            publicURL
          }
        }
      }

      Argentina: allFile(
        filter: {
          relativeDirectory: { eq: "specials" },
          extension: { eq: "mp3" },
          name: { eq: "Argentina" }
        }
      ) {
        edges {
          node {
            publicURL
          }
        }
      }

      Indonesia: allFile(
        filter: {
          relativeDirectory: { eq: "specials" },
          extension: { eq: "mp3" },
          name: { eq: "Indonesia" }
        }
      ) {
        edges {
          node {
            publicURL
          }
        }
      }
    }
  `);
  const [audioContext, setAudioContext] = useState(null);
  const [buffers, setBuffers] = useState({ Argentina: null, Indonesia: null, Bingo: null, Out: null });
  
  useEffect(() => {
    const context = new (window.AudioContext || window.webkitAudioContext)();
    setAudioContext(context);
  
    const preloadAudio = async (url) => {
      const response = await fetch(url);
      const arrayBuffer = await response.arrayBuffer();
      return context.decodeAudioData(arrayBuffer);
    };
  
    const loadBuffers = async () => {
      const ArgentinaSound = await preloadAudio(data.Argentina.edges[0].node.publicURL);
      const IndonesiaSound = await preloadAudio(data.Indonesia.edges[0].node.publicURL);
      
      const BingoSound = await preloadAudio(data.Bingo.edges[0].node.publicURL);
      const OutSound = await preloadAudio(data.Out.edges[0].node.publicURL);


  
      setBuffers({ Argentina: ArgentinaSound, Indonesia: IndonesiaSound , Out: OutSound, Bingo: BingoSound});
    };
  
    loadBuffers();
  }, []);
  
  // サウンドを再生する関数
  const playSound = (buffer) => {
    const source = audioContext.createBufferSource();
    source.buffer = buffer;
    source.connect(audioContext.destination);
    source.start(0);
  };

  const [soundQueue, setSoundQueue] = useState([]);


  // サウンドをキューに追加する関数
  const addToQueue = (sound) => {
    setSoundQueue(prevQueue => [...prevQueue, sound]);
  };

  // Argentinaのサウンドを再生し、キューに追加
  const playArgentina = () => {
    playSound(buffers.Argentina);
    addToQueue(0);
  };

  // Indonesiaのサウンドを再生し、キューに追加
  const playIndonesia = () => {
    playSound(buffers.Indonesia);
    addToQueue(1);
  };




  function matchPattern(arr, pattern) {
    // パターンが空、または配列より長い場合は不一致
    // 不一致
    if (pattern.length === 0 || pattern.length > arr.length) return 0;
  
    // 完全一致と部分一致をチェック
    let isPartialMatch = false;
    for (let i = 0; i <= arr.length - pattern.length; i++) {
      let fullMatch = true;
      let partialMatch = false;
  
      for (let j = 0; j < pattern.length; j++) {
        if (arr[i + j] === pattern[j]) {
          partialMatch = true;
        } else {
          fullMatch = false;
          if (partialMatch) {
            isPartialMatch = true;
          }
        }
      }
  
      // 完全一致
      if (fullMatch) return 1;
    }
  
    // 部分一致
    return isPartialMatch ? 2 : 0;
  }
  

  
  // soundQueueの変更を監視し、変更があったらコンソールに表示
  useEffect(() => {

  const correctPattern = [0,0,1,1,1,1,0,0];

  matchPattern(soundQueue, correctPattern) === 2 ? playSound(buffers.Out) : playSound(buffers.Bingo);

  // if (matchPattern(soundQueue, correctPattern) === 2) {

  //   playSound(buffers.Bingo);
  // }



    console.log(soundQueue);
  }, [soundQueue]);



  return (
    <>
      <button onClick={playArgentina} className="buttonStyle">
        ゼンチン
      </button>
      <button onClick={playIndonesia} className="buttonStyle">
        ドネシア
      </button>
    </>
  );
};

export default SoundButton;
